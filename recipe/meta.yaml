{% set name = "SQLAlchemy-JSONField" %}
{% set version = "1.0.2" %}
package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: dab3abc9d75a1640e7f3d4875564a4199f665d27863da8d5a089e4eaca5e67f2

build:
  number: 0
  skip: true  # [py<37]
  script: {{ PYTHON }} -m pip install . --no-deps --no-build-isolation -vv

requirements:
  host:
    - python
    - pip
# Lower bound for setuptools not required but recommended by upstream
    - setuptools >=61.0.0
    - setuptools_scm >=6.2
    - toml
    - wheel
  run:
    - python
    - sqlalchemy

test:
  imports:
    - sqlalchemy_jsonfield
  source_files:
    - functional_test/
  requires: 
    - pip
    - pytest >= 6.0
    - pytest-mock
    - pytest-asyncio
    - psycopg2
    - postgresql  # [win]
    - pymysql
  commands: 
    - pip check
    - pytest -vv functional_test/

about:
  home: https://github.com/penguinolog/sqlalchemy_jsonfield
  license: Apache-2.0
  license_family: Apache
  license_file: LICENSE
  summary: |
    SQLALchemy JSONField implementation for storing dicts at SQL independently
    from JSON type support.

  description: |
    SqlAlchemy provides JSON field support for several database types
    (PostgreSQL and MySQL for now) and semi-working dict <-> JSON <-> VARCHAR
    example, but... In real scenarios we have tests on sqlite, production on
    MySQL/MariaDB/Percona/PostgreSQL and some of them (modern Oracle MySQL &
    PostgreSQL) support JSON, some of them (SQLite, Percona & MariaDB) requires
    data conversion to Text (not VARCHAR).

    As addition, we have different levels of Unicode support on database and
    connector side, so we may be interested to switch JSON encoding between d
    eployments.
  doc_url: https://github.com/penguinolog/sqlalchemy_jsonfield
  dev_url: https://github.com/penguinolog/sqlalchemy_jsonfield

extra:
  recipe-maintainers:
    - xylar
